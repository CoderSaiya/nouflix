@using MoviePortal.Api
@using MoviePortal.Helpers
@using MoviePortal.Models.DTOs
@using MoviePortal.Models.ValueObject
@inject MovieApi MovApi

@if (_poster.Count == 0)
{
  <div class="text-muted">Chưa có poster.</div>
  <div class="mb-3">
    <label class="form-label">Thêm ảnh Poster (public)</label>
    <InputFile OnChange="(e) => OnImageSelected(e)" />
  </div>
}
else
{
  <div class="row row-cols-2 row-cols-md-4 g-3">
    @foreach (var img in _poster)
    {
      <div class="col">
        <div class="card h-100">
          <img class="card-img-top" src="@StorageHelper.BuildUrl(img)" alt="@img.Alt" />
          <div class="card-body p-2">
            <div class="small text-truncate">@img.</div>
          </div>
          <div class="card-footer p-2 text-end">
            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteImage(img)">Xoá</button>
          </div>
        </div>
      </div>
    }
  </div>
}

@if (_backdrop.Count == 0)
{
  <div class="text-muted">Chưa có ảnh nền.</div>
  <div class="mb-3">
    <label class="form-label">Thêm ảnh nền (public)</label>
    <InputFile OnChange="(e) => OnImageSelected(e, ImageKind.Backdrop)" />
  </div>
}
else
{
  <div class="row row-cols-2 row-cols-md-4 g-3">
    @foreach (var img in _backdrop)
    {
      <div class="col">
        <div class="card h-100">
          <img class="card-img-top" src="@StorageHelper.BuildUrl(img)" alt="@img.Alt" />
          <div class="card-body p-2">
            <div class="small text-truncate">@img.</div>
          </div>
          <div class="card-footer p-2 text-end">
            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteImage(img)">Xoá</button>
          </div>
        </div>
      </div>
    }
  </div>
}

@code {
  [Parameter] public int MovieId { get; set; }

  private List<AssetsDto.Image> _poster = new();
  private List<AssetsDto.Image> _backdrop = new();

  protected override async Task OnInitializedAsync()
  {
    _poster = await MovApi.GetImageByKindAsync(MovieId, ImageKind.Poster);
    _backdrop = await MovApi.GetImageByKindAsync(MovieId, ImageKind.Backdrop);
  }

  private async Task OnImageSelected(InputFileChangeEventArgs e, ImageKind kind = ImageKind.Poster)
  {
    if (e.FileCount == 0) return;
    var f = e.File;

    var img = await MovApi.UploadImageAsync(f, MovieId, kind);
    if (img is not null) _poster.Add(img);
    
    StateHasChanged();
  }

  private async Task DeleteImage(AssetsDto.Image img)
  {
    await MovApi.DeleteImageAsync(img.Id);
    _poster.Remove(img);
  }
}
