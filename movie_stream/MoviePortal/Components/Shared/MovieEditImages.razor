@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using MoviePortal.Data
@using MoviePortal.Helpers
@using MoviePortal.Models.Entities
@using MoviePortal.Models.Specification
@using MoviePortal.Models.ValueObject
@using MoviePortal.Services
@inject AppDbContext Db
@inject MinioObjectStorage Storage
@inject IOptions<StorageOptions> Opts

<div class="mb-3">
  <label class="form-label">Thêm ảnh Poster (public)</label>
  <InputFile OnChange="(e) => OnImageSelected(e)" />

  <label class="form-label">Thêm ảnh nền (public)</label>
  <InputFile OnChange="(e) => OnImageSelected(e, ImageKind.Backdrop)" />
</div>

@if (_poster.Count == 0)
{
  <div class="text-muted">Chưa có poster.</div>
}
else
{
  <div class="row row-cols-2 row-cols-md-4 g-3">
    @foreach (var img in _poster)
    {
      <div class="col">
        <div class="card h-100">
          <img class="card-img-top" src="@StorageHelper.BuildUrl(img)" alt="@img.Alt" />
          <div class="card-body p-2">
            <div class="small text-truncate">@img.</div>
          </div>
          <div class="card-footer p-2 text-end">
            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteImage(img)">Xoá</button>
          </div>
        </div>
      </div>
    }
  </div>
}

@if (_backdrop.Count == 0)
{
  <div class="text-muted">Chưa có ảnh nền.</div>
}
else
{
  <div class="row row-cols-2 row-cols-md-4 g-3">
    @foreach (var img in _backdrop)
    {
      <div class="col">
        <div class="card h-100">
          <img class="card-img-top" src="@StorageHelper.BuildUrl(img)" alt="@img.Alt" />
          <div class="card-body p-2">
            <div class="small text-truncate">@img.</div>
          </div>
          <div class="card-footer p-2 text-end">
            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteImage(img)">Xoá</button>
          </div>
        </div>
      </div>
    }
  </div>
}

@code {
  [Parameter] public int MovieId { get; set; }

  private List<ImageAsset> _poster = new();
  private List<ImageAsset> _backdrop = new();

  protected override async Task OnInitializedAsync()
  {
      _poster = await Db.ImageAssets
        .Where(i => i.MovieId == MovieId && i.Kind == ImageKind.Poster)
        .AsNoTracking()
        .ToListAsync();

      _backdrop = await Db.ImageAssets
        .Where(i => i.MovieId == MovieId && i.Kind == ImageKind.Backdrop)
        .AsNoTracking()
        .ToListAsync();
  }

  private async Task OnImageSelected(InputFileChangeEventArgs e, ImageKind kind = ImageKind.Poster)
  {
      if (e.FileCount == 0) return;
      var f = e.File;

      var ext = Path.GetExtension(f.Name);
      var bucket = Opts.Value.Buckets.Images ?? "images";
      var key = $"movies/{MovieId}/images/{kind.ToString().ToLowerInvariant()}/{Guid.NewGuid():N}{ext}";

      await using var s = f.OpenReadStream(10 * 1024 * 1024); // 10MB
      var put = await Storage.UploadAsync(bucket, s, key, f.ContentType);
      
      var img = new ImageAsset
      {
          MovieId = MovieId,
          Kind = kind,
          Alt = "",
          Bucket = bucket,
          ObjectKey = key,
          Endpoint = Opts.Value.S3.Endpoint,
          ContentType = f.ContentType,
          SizeBytes = put.SizeBytes,
          ETag = put.ETag
      };
      Db.ImageAssets.Add(img);
      await Db.SaveChangesAsync();

      _poster.Add(img);
      StateHasChanged();
  }

  private async Task DeleteImage(ImageAsset img)
  {
      await Storage.DeleteAsync(img.Bucket, img.ObjectKey);
      Db.ImageAssets.Remove(img);
      await Db.SaveChangesAsync();
      _poster.Remove(img);
  }
}
