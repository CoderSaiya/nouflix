@using MoviePortal.Api
@using MoviePortal.Models.DTOs
@using MoviePortal.Models.ValueObject

@inject NavigationManager Nav
@inject TranscodeApi TranscodeApi
@inject MovieApi MovApi
@inject SubtitlesApi SubApi
@inject JobPoller JobPoller

@if (_isBusy)
{
  <div class="position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50 d-flex align-items-center justify-content-center" style="z-index:1050;">
    <div class="bg-white rounded-3 shadow p-4 text-center" style="min-width:320px">
      <div class="spinner-border mb-3" role="status"></div>
      <div class="fw-semibold">@_busyText</div>
      <div class="text-muted small">Vui lòng đợi…</div>
    </div>
  </div>
}

@if (!string.IsNullOrEmpty(_error))
{
  <div class="alert alert-danger my-2">@_error</div>
}

@if (Movie.Type == MovieType.Single)
{
  <div class="alert alert-info">Phim lẻ. Bạn có thể thêm video gắn trực tiếp vào phim.</div>
  <div class="mb-3">
    <label class="form-label">Thêm video (private)</label>
    <InputFile OnChange="OnMovieVideoSelected" />
  </div>
  
  <div class="mb-3">
    <label class="form-label small mt-1">Thêm phụ đề (.vtt)</label>
    <InputFile OnChange="OnMovieSubtitleSelected" />
  </div>

  <ul class="list-group">
    @foreach (var v in _movieVideos)
    {
      <li class="list-group-item d-flex justify-content-between align-items-center">
        <div>
          <div class="fw-bold">@v.Kind - @v.Quality</div>j
          <div class="small text-muted">@v.Bucket / @v.ObjectKey</div>
        </div>
        <div class="btn-group">
          <button class="btn btn-sm btn-outline-secondary" @onclick="() => GoSubtitle(v)">Phụ đề</button>
          <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteVideo(v)">Xoá</button>
        </div>
      </li>
    }
  </ul>
}
else
{
  <div class="d-flex justify-content-between mb-2">
    <h5 class="mb-0">Mùa & Tập</h5>
    <button class="btn btn-sm btn-outline-primary" @onclick="AddSeason">Thêm mùa</button>
  </div>
  
  @if (_seasons.Count == 0)
  {
    <div class="alert alert-warning">Chưa có mùa nào. Nhấn <b>Thêm mùa</b> để tạo Season 1.</div>
  }
  else
  {
    <div class="accordion" id="seasons">
      @foreach (var s in _seasons.OrderBy(x => x.Number))
      {
        <div class="accordion-item">
          <h2 class="accordion-header" id="@($"sh{s.Id}")">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#sc{s.Id}")">
              Mùa @s.Number @(!string.IsNullOrWhiteSpace(s.Title) ? $"- {s.Title}" : "")
            </button>
          </h2>
          <div id="@($"sc{s.Id}")" class="accordion-collapse collapse" data-bs-parent="#seasons">
            <div class="accordion-body">
              <div class="d-flex justify-content-between mb-2">
                <div class="small text-muted">
                  Năm phát: @s.Year
                </div>
                <div class="text-nowrap">
                  <button class="btn btn-sm btn-outline-secondary me-2" @onclick="@(()=>RenameSeason(s))">Đổi tên</button>
                  <button class="btn btn-sm btn-outline-danger" @onclick="@(()=>DeleteSeason(s))">Xoá mùa</button>
                </div>
              </div>

              <table class="table table-sm align-middle">
                <thead>
                  <tr>
                    <th style="width:80px">Tập #</th>
                    <th>Tiêu đề</th>
                    <th style="width:160px">Ngày phát</th>
                    <th style="width:140px">Trạng thái</th>
                    <th style="width:240px">Video</th>
                    <th style="width:160px"></th>
                  </tr>
                </thead>
                <tbody>
                @{
                  var eps = _epsBySeason.TryGetValue(s.Id, out var list) ? list.OrderBy(x => x.Number).ToList() : new List<MovieDto.Episode>();
                }
                @foreach (var e in eps)
                {
                  <tr>
                    <td><InputNumber class="form-control form-control-sm" @bind-Value="e.Number" /></td>
                    <td><InputText class="form-control form-control-sm" @bind-Value="e.Title" /></td>
                    <td><InputDate class="form-control form-control-sm" @bind-Value="e.ReleaseDate" /></td>
                    <td>
                      <InputSelect class="form-select form-select-sm" @bind-Value="e.Status">
                        @foreach (var v in Enum.GetValues<PublishStatus>()) { <option value="@v">@v</option> }
                      </InputSelect>
                    </td>
                    <td>
                      <label class="form-label small mb-1">Video (nguồn để transcode HLS)</label>
                      <InputFile OnChange="args => OnEpisodeVideoSelected(s, e, args)" />
                    </td>
                    <td class="text-end">
                      <button class="btn btn-sm btn-outline-success me-2" @onclick="() => SaveEpisode(e)">Lưu</button>
                      <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEpisode(s, e)">Xoá</button>
                    </td>
                  </tr>
                }
                </tbody>
              </table>

              <div class="text-end">
                <button class="btn btn-sm btn-outline-primary" @onclick="@(()=>AddEpisode(s))">Thêm tập</button>
              </div>

              @if (_videosByEpisode.Keys.Any(k => _epsBySeason.TryGetValue(s.Id, out var lv) && lv.Any(x => x.Id == k)))
              {
                <h6 class="mt-3">Video trong mùa @s.Number</h6>
                <ul class="list-group">
                  @foreach (var kv in _videosByEpisode.OrderBy(k=>k.Key))
                  {
                    var ep = _epsBySeason.TryGetValue(s.Id, out var lv2) ? lv2.FirstOrDefault(x => x.Id == kv.Key) : null;
                    if (ep is null) { continue; }
                    foreach (var v in kv.Value)
                    {
                      <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                          <div class="fw-bold">Tập @ep.Number → @v.Kind - @v.Quality</div>
                          <div class="small text-muted">@v.Bucket / @v.ObjectKey</div>
                        </div>
                        <div class="btn-group">
                          <button class="btn btn-sm btn-outline-secondary" @onclick="() => GoSubtitle(v)">Phụ đề</button>
                          <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteVideo(v)">Xoá</button>
                        </div>
                      </li>
                    }
                  }
                </ul>
              }
            </div>
          </div>
        </div>
      }
    </div>
  }
}

@code {
  [Parameter] public MovieDto.Movie Movie { get; set; } = null!;

  private List<MovieDto.Season> _seasons = new();
  private Dictionary<int, List<MovieDto.Episode>> _epsBySeason = new(); // seasonId -> episodes
  private List<MovieDto.VideoAssets> _movieVideos = new();
  private Dictionary<int, List<MovieDto.VideoAssets>> _videosByEpisode = new(); // epId -> videos
  
  private bool _isBusy;
  private string _busyText = "";
  private string? _error;
  
  private async Task BusyRun(string text, Func<Task> work)
  {
    _error = null;
    _busyText = text;
    _isBusy = true;
    StateHasChanged(); // cập nhật UI để hiện overlay

    try
    {
      await work();
    }
    catch (Exception ex)
    {
      // hiện lỗi ra màn hình
      _error = ex.Message;
    }
    finally
    {
      _isBusy = false;
      _busyText = "";
      StateHasChanged(); // tắt overlay
    }
  }

  protected override async Task OnParametersSetAsync()
  {
    if (Movie.Id == 0) return;

    if (Movie.Type == MovieType.Single)
    {
      _movieVideos = await MovApi.GetVideosAsync(Movie.Id);
      return;
    }

    // Series
    _seasons = await MovApi.GetSeasonsAsync(Movie.Id);
    
    var seasonIds = _seasons
      .Select(s => s.Id)
      .ToArray();
    var eps = await MovApi.GetEpisodeAsync(Movie.Id, seasonIds);
    _epsBySeason = eps
      .GroupBy(e => e.SeasonId!.Value)
      .ToDictionary(g => g.Key, g => g.ToList());

    var epIds = eps
      .Select(x => x.Id)
      .ToArray();
    var vids = await MovApi.GetVideoByEpisodeIdsAsync(epIds);
    _videosByEpisode = vids
      .GroupBy(v => v.EpisodeId!.Value)
      .ToDictionary(g => g.Key, g => g.ToList());
  }
  
  private async Task AddSeason()
  {
    var next = (_seasons.LastOrDefault()?.Number ?? 0) + 1;
    
    var s = await MovApi.CreateSeasonAsync(Movie.Id,
      new MovieDto.CreateSeasonReq(
        Number: next,
        Title: $"Season {next}",
        Year: DateTime.UtcNow.Year));
    _seasons.Add(s);
    
    StateHasChanged();
  }
  
  private async Task RenameSeason(MovieDto.Season s)
  {
    var updated = await MovApi.UpdateSeasonAsync(s.Id, new MovieDto.UpdateSeasonReq($"Season {s.Number}"));
    
    var idx = _seasons.FindIndex(x => x.Id == s.Id);
    if (idx >= 0) _seasons[idx] = updated;
  }

  private async Task DeleteSeason(MovieDto.Season s)
  {
    await MovApi.DeleteSeasonAsync(s.Id);

    _seasons.RemoveAll(x => x.Id == s.Id);

    if (_epsBySeason.TryGetValue(s.Id, out var eps))
    {
      foreach (var e in eps) _videosByEpisode.Remove(e.Id);
      _epsBySeason.Remove(s.Id);
    }
  }
  
  private void AddEpisode(MovieDto.Season s)
  {
    var current = _epsBySeason.TryGetValue(s.Id, out var list) ? list : (_epsBySeason[s.Id] = new List<MovieDto.Episode>());
    var next = (current.LastOrDefault()?.Number ?? 0) + 1;
    var e = new MovieDto.Episode
    {
      MovieId = Movie.Id,
      SeasonId = s.Id,
      Number = next,
      Title = $"Tập {next}",
      Status = PublishStatus.Published,
      ReleaseDate = DateTime.UtcNow
    };
    current.Add(e);
    StateHasChanged();
  }
  
  private async Task SaveEpisode(MovieDto.Episode e)
  {
    var req = new MovieDto.UpsertEpisodeReq(
      MovieId: Movie.Id,
      SeasonId: e.SeasonId!.Value,
      EpisodeNumber: e.Number,
      Title: e.Title,
      Status: e.Status,
      ReleaseDate: e.ReleaseDate);
    
    var id = await MovApi.UpsertEpisodeAsync(req, e.Id);
    e.Id = id;
  }
  
  private async Task DeleteEpisode(MovieDto.Season s, MovieDto.Episode e)
  {
    await MovApi.DeleteEpisodeAsync(e.Id);
    if (_epsBySeason.TryGetValue(s.Id, out var list))
      list.RemoveAll(x => x.Id == e.Id);
    _videosByEpisode.Remove(e.Id);
  }

  private async Task OnEpisodeVideoSelected(MovieDto.Season s, MovieDto.Episode e, InputFileChangeEventArgs args)
  {
      if (args.FileCount == 0) return;
      var f = args.File;

      await BusyRun($"Đang xử lý tập {e.Number}…", async () =>
      {
        if (e.Id == 0)
          await SaveEpisode(e);

        var profiles = Movie.Quality switch
        {
          QualityLevel.Low => new[] { "480" },
          QualityLevel.Medium => new[] { "720", "480" },
          _ => new[] { "1080", "720", "480" }
        };

        await using var stream = f.OpenReadStream(long.MaxValue);
        var jobId = await TranscodeApi.UploadAndEnqueueAsync(
          movieId: Movie.Id,
          episodeId: e.Id,
          episodeNumber: e.Number,
          seasonId: s.Id,
          seasonNumber: s.Number,
          language: Movie.Language ?? "vi",
          profiles: profiles,
          fileStream: stream,
          fileName: f.Name,
          contentType: f.ContentType
        );

        using var cts = new CancellationTokenSource();
        await JobPoller.PollAsync(
          getStatus: ct => TranscodeApi.GetStatusAsync(jobId, ct),
          onProgress: st =>
          {
            _busyText = st.State switch
            {
              "Queued" => "Đang xếp hàng…",
              "Running" => $"Đang xử lý… {st.Progress}%",
              _ => "Đang xử lý…"
            };
            StateHasChanged();
            return Task.CompletedTask;
          },
          onDone: async st =>
          {
            _busyText = "Hoàn tất.";
            // Tải lại assets cho tập
            var vids = await MovApi.GetVideoByEpisode(e.Id);
            _videosByEpisode[e.Id] = vids
              .OrderByDescending(v => v.Kind)
              .ThenByDescending(v => v.Quality)
              .ToList();;
            
            StateHasChanged();
          },
          interval: TimeSpan.FromSeconds(2),
          ct: cts.Token
        );
      });
  }

  private async Task OnMovieVideoSelected(InputFileChangeEventArgs args)
  {
    if (args.FileCount == 0) return;
    var f = args.File;

    await BusyRun("Đang xử lý video phim lẻ…", async () =>
    {
      var profiles = Movie.Quality switch
      {
        QualityLevel.Low => new[] { "480" },
        QualityLevel.Medium => new[] { "720", "480" },
        _ => new[] { "1080", "720", "480" }
      };

      await using var stream = f.OpenReadStream(long.MaxValue);
      var jobId = await TranscodeApi.UploadAndEnqueueAsync(
        movieId: Movie.Id,
        episodeId: null,
        episodeNumber: null,
        seasonId: null,
        seasonNumber: null,
        language: Movie.Language ?? "vi",
        profiles: profiles,
        fileStream: stream,
        fileName: f.Name,
        contentType: f.ContentType
      );
      
      using var cts = new CancellationTokenSource();
      await JobPoller.PollAsync(
        getStatus: ct => TranscodeApi.GetStatusAsync(jobId, ct),
        onProgress: st =>
        {
          _busyText = st.State switch
          {
            "Queued" => "Đang xếp hàng…",
            "Running" => $"Đang xử lý… {st.Progress}%",
            _ => "Đang xử lý…"
          };
          StateHasChanged();
          return Task.CompletedTask;
        },
        onDone: async st =>
        {
          _busyText = "Hoàn tất.";
          // Tải lại assets cho tập
          var vid = await MovApi.GetVideosAsync(Movie.Id);
          _movieVideos = vid
            .OrderByDescending(v => v.Kind)
            .ThenByDescending(v => v.Quality)
            .ToList();;
          
          StateHasChanged();
        },
        interval: TimeSpan.FromSeconds(2),
        ct: cts.Token
      );
    });
  }
  
  private async Task OnMovieSubtitleSelected(InputFileChangeEventArgs args)
  {
    if (args.FileCount == 0) return;
    var f = args.File;
    await SubApi.UploadRawVttAsync(Movie.Id, null, "vi", "Tiếng Việt", f);
  }

    private async Task DeleteVideo(MovieDto.VideoAssets v)
    {
      await MovApi.DeleteVideoAsync(v.Id);
      _movieVideos.RemoveAll(x=>x.Id==v.Id);
      if (v.EpisodeId is not null && _videosByEpisode.TryGetValue(v.EpisodeId.Value, out var list))
        list.RemoveAll(x => x.Id == v.Id);
  }
  
  private void GoSubtitle(MovieDto.VideoAssets v)
  {
    var lang = Movie.Language ?? "vi";
    if (v.EpisodeId is { } epId)
      Nav.NavigateTo($"/admin/movies/{Movie.Id}/episodes/{epId}/subtitles/{lang}");
    else
      Nav.NavigateTo($"/admin/movies/{Movie.Id}/subtitles/{lang}");
  }
}
