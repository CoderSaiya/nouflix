@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using MoviePortal.Adapters
@using MoviePortal.Data
@using MoviePortal.Models
@using MoviePortal.Models.Entities
@using MoviePortal.Models.Specification
@using MoviePortal.Models.ValueObject
@using MoviePortal.Services
@inject AppDbContext Db
@inject MinioObjectStorage Storage
@inject IOptions<StorageOptions> Opts
@inject FfmpegHlsTranscoder Transcoder
@inject NavigationManager Nav

@if (_isBusy)
{
  <div class="position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50 d-flex align-items-center justify-content-center" style="z-index:1050;">
    <div class="bg-white rounded-3 shadow p-4 text-center" style="min-width:320px">
      <div class="spinner-border mb-3" role="status"></div>
      <div class="fw-semibold">@_busyText</div>
      <div class="text-muted small">Vui lòng đợi…</div>
    </div>
  </div>
}

@if (!string.IsNullOrEmpty(_error))
{
  <div class="alert alert-danger my-2">@_error</div>
}

@if (Movie.Type == MovieType.Single)
{
  <div class="alert alert-info">Phim lẻ. Bạn có thể thêm video gắn trực tiếp vào phim.</div>
  <div class="mb-3">
    <label class="form-label">Thêm video (private)</label>
    <InputFile OnChange="OnMovieVideoSelected" />
  </div>
  
  <div class="mb-3">
    <label class="form-label small mt-1">Thêm phụ đề (.vtt)</label>
    <InputFile OnChange="OnMovieSubtitleSelected" />
  </div>

  <ul class="list-group">
    @foreach (var v in _movieVideos)
    {
      <li class="list-group-item d-flex justify-content-between align-items-center">
        <div>
          <div class="fw-bold">@v.Kind - @v.Quality</div>
          <div class="small text-muted">@v.Bucket / @v.ObjectKey</div>
        </div>
        <div class="btn-group">
          <button class="btn btn-sm btn-outline-secondary" @onclick="() => GoSubtitle(v)">Phụ đề</button>
          <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteVideo(v)">Xoá</button>
        </div>
      </li>
    }
  </ul>
}
else
{
  <div class="d-flex justify-content-between mb-2">
    <h5 class="mb-0">Mùa & Tập</h5>
    <button class="btn btn-sm btn-outline-primary" @onclick="AddSeason">Thêm mùa</button>
  </div>
  
  @if (_seasons.Count == 0)
  {
    <div class="alert alert-warning">Chưa có mùa nào. Nhấn <b>Thêm mùa</b> để tạo Season 1.</div>
  }
  else
  {
    <div class="accordion" id="seasons">
      @foreach (var s in _seasons.OrderBy(x => x.Number))
      {
        <div class="accordion-item">
          <h2 class="accordion-header" id="@($"sh{s.Id}")">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#sc{s.Id}")">
              Mùa @s.Number @(!string.IsNullOrWhiteSpace(s.Title) ? $"- {s.Title}" : "")
            </button>
          </h2>
          <div id="@($"sc{s.Id}")" class="accordion-collapse collapse" data-bs-parent="#seasons">
            <div class="accordion-body">
              <div class="d-flex justify-content-between mb-2">
                <div class="small text-muted">
                  Năm phát: @s.Year
                </div>
                <div class="text-nowrap">
                  <button class="btn btn-sm btn-outline-secondary me-2" @onclick="@(()=>RenameSeason(s))">Đổi tên</button>
                  <button class="btn btn-sm btn-outline-danger" @onclick="@(()=>DeleteSeason(s))">Xoá mùa</button>
                </div>
              </div>

              <table class="table table-sm align-middle">
                <thead>
                  <tr>
                    <th style="width:80px">Tập #</th>
                    <th>Tiêu đề</th>
                    <th style="width:160px">Ngày phát</th>
                    <th style="width:140px">Trạng thái</th>
                    <th style="width:240px">Video</th>
                    <th style="width:160px"></th>
                  </tr>
                </thead>
                <tbody>
                @{
                  var eps = _epsBySeason.TryGetValue(s.Id, out var list) ? list.OrderBy(x => x.Number).ToList() : new List<Episode>();
                }
                @foreach (var e in eps)
                {
                  <tr>
                    <td><InputNumber class="form-control form-control-sm" @bind-Value="e.Number" /></td>
                    <td><InputText class="form-control form-control-sm" @bind-Value="e.Title" /></td>
                    <td><InputDate class="form-control form-control-sm" @bind-Value="e.ReleaseDate" /></td>
                    <td>
                      <InputSelect class="form-select form-select-sm" @bind-Value="e.Status">
                        @foreach (var v in Enum.GetValues<PublishStatus>()) { <option value="@v">@v</option> }
                      </InputSelect>
                    </td>
                    <td>
                      <label class="form-label small mb-1">Video (nguồn để transcode HLS)</label>
                      <InputFile OnChange="args => OnEpisodeVideoSelected(s, e, args)" />
                    </td>
                    <td class="text-end">
                      <button class="btn btn-sm btn-outline-success me-2" @onclick="() => SaveEpisode(e)">Lưu</button>
                      <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEpisode(s, e)">Xoá</button>
                    </td>
                  </tr>
                }
                </tbody>
              </table>

              <div class="text-end">
                <button class="btn btn-sm btn-outline-primary" @onclick="@(()=>AddEpisode(s))">Thêm tập</button>
              </div>

              @if (_videosByEpisode.Keys.Any(k => _epsBySeason.TryGetValue(s.Id, out var lv) && lv.Any(x => x.Id == k)))
              {
                <h6 class="mt-3">Video trong mùa @s.Number</h6>
                <ul class="list-group">
                  @foreach (var kv in _videosByEpisode.OrderBy(k=>k.Key))
                  {
                    var ep = _epsBySeason.TryGetValue(s.Id, out var lv2) ? lv2.FirstOrDefault(x => x.Id == kv.Key) : null;
                    if (ep is null) { continue; }
                    foreach (var v in kv.Value)
                    {
                      <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                          <div class="fw-bold">Tập @ep.Number → @v.Kind - @v.Quality</div>
                          <div class="small text-muted">@v.Bucket / @v.ObjectKey</div>
                        </div>
                        <div class="btn-group">
                          <button class="btn btn-sm btn-outline-secondary" @onclick="() => GoSubtitle(v)">Phụ đề</button>
                          <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteVideo(v)">Xoá</button>
                        </div>
                      </li>
                    }
                  }
                </ul>
              }
            </div>
          </div>
        </div>
      }
    </div>
  }
}

@code {
  [Parameter] public Movie Movie { get; set; } = null!;

  private List<Season> _seasons = new();
  private Dictionary<int, List<Episode>> _epsBySeason = new(); // seasonId -> episodes
  private List<VideoAsset> _movieVideos = new();
  private Dictionary<int, List<VideoAsset>> _videosByEpisode = new(); // epId -> videos
  
  private bool _isBusy;
  private string _busyText = "";
  private string? _error;
  
  private async Task BusyRun(string text, Func<Task> work)
  {
    _error = null;
    _busyText = text;
    _isBusy = true;
    StateHasChanged(); // cập nhật UI để hiện overlay

    try
    {
      await work();
    }
    catch (Exception ex)
    {
      // hiện lỗi ra màn hình
      _error = ex.Message;
    }
    finally
    {
      _isBusy = false;
      _busyText = "";
      StateHasChanged(); // tắt overlay
    }
  }

  protected override async Task OnParametersSetAsync()
  {
    if (Movie.Id == 0) return;

    if (Movie.Type == MovieType.Single)
    {
      _movieVideos = await Db.VideoAssets.Where(v => v.MovieId == Movie.Id).AsNoTracking().ToListAsync();
      return;
    }

    // Series
    _seasons = await Db.Seasons.Where(s => s.MovieId == Movie.Id)
      .OrderBy(s => s.Number)
      .AsNoTracking()
      .ToListAsync();

    // nếu chưa có mùa: không tự tạo ở DB, chỉ nhắc; (hoặc bạn có thể auto tạo Season 1 ở đây)
    var seasonIds = _seasons.Select(s => s.Id).ToArray();
    var eps = await Db.Episodes.Where(e => e.MovieId == Movie.Id && e.SeasonId != null && seasonIds.Contains(e.SeasonId!.Value))
      .OrderBy(e => e.SeasonId).ThenBy(e => e.Number)
      .AsNoTracking()
      .ToListAsync();

    _epsBySeason = eps.GroupBy(e => e.SeasonId!.Value).ToDictionary(g => g.Key, g => g.ToList());

    var epIds = eps.Select(x => x.Id).ToArray();
    var vids = await Db.VideoAssets.Where(v => v.EpisodeId != null && epIds.Contains(v.EpisodeId!.Value))
      .AsNoTracking().ToListAsync();
    _videosByEpisode = vids.GroupBy(v => v.EpisodeId!.Value).ToDictionary(g => g.Key, g => g.ToList());
  }
  
  private async Task AddSeason()
  {
    var next = (_seasons.LastOrDefault()?.Number ?? 0) + 1;
    var s = new Season
    {
      MovieId = Movie.Id,
      Number = next,
      Title = $"Season {next}",
      Year = DateTime.UtcNow.Year
    };
    Db.Seasons.Add(s);
    await Db.SaveChangesAsync();
    _seasons.Add(s);
    StateHasChanged();
  }
  
  private async Task RenameSeason(Season s)
  {
    s.Title = $"Season {s.Number}";
    Db.Seasons.Update(s);
    await Db.SaveChangesAsync();
  }

  private async Task DeleteSeason(Season s)
  {
    // Xoá video objects của mọi tập trong mùa
    var epIds = await Db.Episodes
      .Where(e => e.SeasonId == s.Id)
      .Select(e => e.Id)
      .ToListAsync();
    
    var vids = await Db.VideoAssets
      .Where(v => v.EpisodeId != null && epIds.Contains(v.EpisodeId!.Value))
      
      .ToListAsync();
    foreach (var v in vids) 
      await Storage.DeleteAsync(v.Bucket, v.ObjectKey);
    Db.VideoAssets.RemoveRange(vids);

    // Xoá tập
    var eps = await Db.Episodes
      .Where(e => e.SeasonId == s.Id)
      .ToListAsync();
    
    Db.Episodes.RemoveRange(eps);

    // Xoá mùa
    Db.Seasons.Remove(s);
    await Db.SaveChangesAsync();

    _seasons.RemoveAll(x => x.Id == s.Id);
    foreach (var id in epIds)
      _videosByEpisode.Remove(id);
    
    _epsBySeason.Remove(s.Id);
  }
  
  private void AddEpisode(Season s)
  {
    var current = _epsBySeason.TryGetValue(s.Id, out var list) ? list : (_epsBySeason[s.Id] = new List<Episode>());
    var next = (current.LastOrDefault()?.Number ?? 0) + 1;
    var e = new Episode
    {
      MovieId = Movie.Id,
      SeasonId = s.Id,
      Number = next,
      Title = $"Tập {next}",
      Status = PublishStatus.Published,
      ReleaseDate = DateTime.UtcNow
    };
    current.Add(e);
    StateHasChanged();
  }
  
  private async Task SaveEpisode(Episode e)
  {
    if (e.Id == 0) Db.Episodes.Add(e); else Db.Episodes.Update(e);
    await Db.SaveChangesAsync();

    if (e.Id == 0)
    {
      // lấy lại Id vừa insert
      var saved = await Db.Episodes.OrderByDescending(x => x.Id)
        .FirstAsync(x => x.MovieId == e.MovieId && x.SeasonId == e.SeasonId && x.Number == e.Number);
      e.Id = saved.Id;
    }
  }
  
  private async Task DeleteEpisode(Season s, Episode e)
  {
    var vids = await Db.VideoAssets
      .Where(v => v.EpisodeId == e.Id)
      .ToListAsync();
    
    foreach (var v in vids) 
      await Storage.DeleteAsync(v.Bucket, v.ObjectKey);
    
    Db.VideoAssets.RemoveRange(vids);
    Db.Episodes.Remove(e);
    await Db.SaveChangesAsync();

    if (_epsBySeason.TryGetValue(s.Id, out var list))
      list.RemoveAll(x => x.Id == e.Id);
    
    _videosByEpisode.Remove(e.Id);
  }

  private async Task OnEpisodeVideoSelected(Season s, Episode e, InputFileChangeEventArgs args)
  {
      if (args.FileCount == 0) return;
      var f = args.File;

      await BusyRun($"Đang xử lý tập {e.Number}…", async () =>
      {
        if (e.Id == 0)
          await SaveEpisode(e);

        var profiles = Movie.Quality switch
        {
          QualityLevel.Low => new[] { "480" },
          QualityLevel.Medium => new[] { "720", "480" },
          _ => new[] { "1080", "720", "480" }
        };

        await Transcoder.TranscodeAndUploadAsync(
          movieId: Movie.Id,
          episodeId: e.Id,
          episodeNumber: e.Number,
          file: f,
          profiles: profiles,
          language: Movie.Language ?? "vi"
        );

        var vids = await Db.VideoAssets
          .Where(v => v.EpisodeId == e.Id)
          .AsNoTracking()
          .OrderByDescending(v => v.Kind) // ưu tiên Master trước
          .ThenByDescending(v => v.Quality)
          .ToListAsync();

        _videosByEpisode[e.Id] = vids;
      });
  }

  private async Task OnMovieVideoSelected(InputFileChangeEventArgs args)
  {
    if (args.FileCount == 0) return;
    var f = args.File;

    await BusyRun("Đang xử lý video phim lẻ…", async () =>
    {
      var profiles = Movie.Quality switch
      {
        QualityLevel.Low => new[] { "480" },
        QualityLevel.Medium => new[] { "720", "480" },
        _ => new[] { "1080", "720", "480" }
      };

      await Transcoder.TranscodeAndUploadAsync(
        movieId: Movie.Id,
        episodeId: null,
        episodeNumber: null,
        file: f,
        profiles: profiles,
        language: Movie.Language ?? "vi"
      );

      _movieVideos = await Db.VideoAssets
        .Where(v => v.MovieId == Movie.Id && v.EpisodeId == null)
        .AsNoTracking()
        .OrderByDescending(v => v.Kind) // Master trước
        .ThenByDescending(v => v.Quality)
        .ToListAsync();
    });
  }
  
  private async Task OnMovieSubtitleSelected(InputFileChangeEventArgs args)
  {
    if (args.FileCount == 0) return;
    var f = args.File;
    await Transcoder.UploadSubtitleVttAsync(Movie.Id, null, null, f, "vi", "Tiếng Việt");
  }

  private async Task DeleteVideo(VideoAsset v)
  {
      await Storage.DeleteAsync(v.Bucket, v.ObjectKey);
      Db.VideoAssets.Remove(v);
      await Db.SaveChangesAsync();

      _movieVideos.RemoveAll(x=>x.Id==v.Id);
      if (v.EpisodeId is not null && _videosByEpisode.TryGetValue(v.EpisodeId.Value, out var list))
        list.RemoveAll(x => x.Id == v.Id);
  }
  
  private void GoSubtitle(VideoAsset v)
  {
    var lang = Movie.Language ?? "vi";
    if (v.EpisodeId is int epId)
      Nav.NavigateTo($"/admin/movies/{Movie.Id}/episodes/{epId}/subtitles/{lang}");
    else
      Nav.NavigateTo($"/admin/movies/{Movie.Id}/subtitles/{lang}");
  }
}
