@using System.Globalization
@using System.Text
@using System.Text.RegularExpressions
@using MoviePortal.Models.DTOs
@using MoviePortal.Models.ValueObject

<EditForm Model="Movie" OnValidSubmit="OnSave">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <div class="row g-3">
    <div class="col-md-6">
      <label class="form-label">Tiêu đề</label>
      <InputText class="form-control"
                 @bind-Value="Movie.Title"
                 @oninput="OnTitleInput" />
    </div>

    <div class="col-md-6">
      <label class="form-label">Tên khác</label>
      <InputText class="form-control"
                 @bind-Value="Movie.AlternateTitle"
                 @oninput="AlternateOnInput" />
    </div>

    <div class="col-md-6">
      <label class="form-label">Slug</label>
      <input class="form-control" value="@Movie.Slug" readonly />
    </div>
    
    <div class="col-12">
      <label class="form-label">Tóm tắt</label>
      <InputTextArea class="form-control" @bind-Value="Movie.Overview" rows="4" />
    </div>

    <div class="col-md-3">
      <label class="form-label">Loại</label>
      <InputSelect class="form-select" @bind-Value="Movie.Type">
        @foreach (var v in Enum.GetValues<MovieType>()) { <option value="@v">@v</option> }
      </InputSelect>
    </div>
    <div class="col-md-3">
      <label class="form-label">Trạng thái</label>
      <InputSelect class="form-select" @bind-Value="Movie.Status">
        @foreach (var v in Enum.GetValues<PublishStatus>()) { <option value="@v">@v</option> }
      </InputSelect>
    </div>
    <div class="col-md-3">
      <label class="form-label">Chất lượng</label>
      <InputSelect class="form-select" @bind-Value="Movie.Quality">
        @foreach (var v in Enum.GetValues<QualityLevel>()) { <option value="@v">@v</option> }
      </InputSelect>
    </div>
    <div class="col-md-3">
      <label class="form-label">VIP</label><br />
      <InputCheckbox class="form-check-input" @bind-Value="Movie.IsVipOnly" />
    </div>

    <div class="col-md-4">
      <label class="form-label">Ngày phát hành</label>
      <InputDate class="form-control" @bind-Value="Movie.ReleaseDate" />
    </div>
    <div class="col-md-4">
      <label class="form-label">Đạo diễn</label>
      <InputText class="form-control" @bind-Value="Movie.Director" />
    </div>
    <div class="col-md-4">
      <label class="form-label">Quốc gia</label>
      <InputText class="form-control" @bind-Value="Movie.Country" />
    </div>

    <div class="col-md-6">
      <label class="form-label">Ngôn ngữ</label>
      <InputText class="form-control" @bind-Value="Movie.Language" />
    </div>
    <div class="col-md-6">
      <label class="form-label">Độ tuổi</label>
      <InputText class="form-control" @bind-Value="Movie.AgeRating" />
    </div>

    <div class="col-12">
      <label class="form-label">Thể loại</label>
      <div class="d-flex flex-wrap gap-3">
        @foreach (var g in AllGenres)
        {
          <div class="form-check">
            <input class="form-check-input" type="checkbox"
                   checked="@SelectedGenreIds.Contains(g.Id)"
                   @onchange="(e)=>Toggle(SelectedGenreIds, g.Id, (bool)e.Value!)" />
            <label class="form-check-label">@g.Name</label>
          </div>
        }
      </div>
    </div>

    <div class="col-12">
      <label class="form-label">Studio</label>
      <div class="d-flex flex-wrap gap-3">
        @foreach (var s in AllStudios)
        {
          <div class="form-check">
            <input class="form-check-input" type="checkbox"
                   checked="@SelectedStudioIds.Contains(s.Id)"
                   @onchange="(e)=>Toggle(SelectedStudioIds, s.Id, (bool)e.Value!)" />
            <label class="form-check-label">@s.Name</label>
          </div>
        }
      </div>
    </div>
  </div>

  <div class="mt-3">
    <button class="btn btn-primary" type="submit">Lưu</button>
    <button class="btn btn-secondary ms-2" type="button" @onclick="OnCancel">Quay lại</button>
  </div>
</EditForm>

@code {
  [Parameter] public MovieDto.Movie Movie { get; set; } = null!;
  [Parameter] public List<MovieDto.Genre> AllGenres { get; set; } = null!;
  [Parameter] public HashSet<int> SelectedGenreIds { get; set; } = null!;
  [Parameter] public List<MovieDto.Studio> AllStudios { get; set; } = null!;
  [Parameter] public HashSet<int> SelectedStudioIds { get; set; } = null!;

  [Parameter] public EventCallback OnSave { get; set; }
  [Parameter] public EventCallback OnCancel { get; set; }
  
  private bool _alternateEdited = false;

  private void Toggle(HashSet<int> set, int id, bool on)
  {
      if (on) set.Add(id); else set.Remove(id);
  }
  
  protected override void OnParametersSet()
  {
    _alternateEdited = !string.IsNullOrWhiteSpace(Movie.AlternateTitle)
                       && Movie.AlternateTitle != Movie.Title;

    if (string.IsNullOrWhiteSpace(Movie.Slug) && !string.IsNullOrWhiteSpace(Movie.Title))
      Movie.Slug = Slugify(Movie.Title);
  }

  private void OnTitleInput(ChangeEventArgs e)
  {
    var newTitle = e.Value?.ToString() ?? string.Empty;
    if (Movie.Title == newTitle) return;

    Movie.Title = newTitle;

    // Auto-fill Alternate nếu user chưa sửa tay
    if (!_alternateEdited || string.IsNullOrWhiteSpace(Movie.AlternateTitle))
      Movie.AlternateTitle = Movie.Title;

    // Slug luôn sinh từ Title
    Movie.Slug = Slugify(Movie.Title);
  }

  private void AlternateOnInput(ChangeEventArgs e)
  {
    _alternateEdited = true;
    Movie.AlternateTitle = e.Value?.ToString() ?? string.Empty;
  }

  private static string Slugify(string? input)
  {
    if (string.IsNullOrWhiteSpace(input)) return string.Empty;

    var s = input.Trim().ToLowerInvariant();
    s = s.Replace('đ', 'd').Replace('Đ', 'd');

    var normalized = s.Normalize(NormalizationForm.FormD);
    var sb = new StringBuilder();
    foreach (var ch in normalized)
    {
      var uc = CharUnicodeInfo.GetUnicodeCategory(ch);
      if (uc != UnicodeCategory.NonSpacingMark) sb.Append(ch);
    }
    s = sb.ToString().Normalize(NormalizationForm.FormC);

    s = Regex.Replace(s, @"[^a-z0-9]+", "-");
    s = Regex.Replace(s, @"-+", "-").Trim('-');
    return s;
  }
}
