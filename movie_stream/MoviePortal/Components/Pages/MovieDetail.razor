@page "/movies/view/{id:int}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using MoviePortal.Data
@using MoviePortal.Models
@using MoviePortal.Models.Entities
@using MoviePortal.Models.ValueObject
@using MoviePortal.Services
@inject AppDbContext Db
@inject MinioObjectStorage Storage

@if (_loading) { <p>Đang tải...</p> }
else if (_movie is null) { <div class="alert alert-warning">Không tìm thấy phim.</div> }
else
{
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">@_movie.Title</h3>
    <div class="text-nowrap">
      <a class="btn btn-outline-secondary me-2"  href="/movies">Danh sách</a>
      <a class="btn btn-primary" href="@($"/movies/edit/{_movie.Id}")">Sửa</a>
    </div>
  </div>

  <div class="row g-3">
    <div class="col-md-4">
      @if (_posterUrl is not null)
      {
        <img class="img-fluid rounded" src="@_posterUrl" alt="@_movie.Title" />
      }
      else { <div class="text-muted">Chưa có poster.</div> }
    </div>

    <div class="col-md-8">
      <div class="mb-2 text-muted">
        @_movie.Status | @_movie.Type | @_movie.ReleaseDate?.ToShortDateString() | Chất lượng: @_movie.Quality
      </div>
      <p>@_movie.Synopsis</p>

      @if (_movie.Type == MovieType.Single)
      {
        <h5>Video</h5>
        @if (_movieVideos.Count == 0)
        {
          <div class="text-muted">Chưa có video.</div>
        }
        else
        {
          <ul class="list-group">
          @foreach (var v in _movieVideos)
          {
            <li class="list-group-item d-flex justify-content-between align-items-center">
              <div>
                <div class="fw-bold">@v.Kind - @v.Quality</div>
                <div class="small text-muted">@v.Bucket / @v.ObjectKey</div>
              </div>
              <button class="btn btn-sm btn-outline-primary" @onclick="() => PreviewAsync(v)">Xem thử (10')</button>
            </li>
          }
          </ul>
        }
      }
      else
      {
        <h5>Tập</h5>
        @if (_episodes.Count == 0)
        {
          <div class="text-muted">Chưa có tập.</div>
        }
        else
        {
          <div class="accordion" id="eps">
            @foreach (var e in _episodes)
            {
              <div class="accordion-item">
                <h2 class="accordion-header" id="@($"h{e.Id}")">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#c{e.Id}")">
                    Tập @e.Number: @e.Title
                  </button>
                </h2>
                <div id="@($"c{e.Id}")" class="accordion-collapse collapse" data-bs-parent="#eps">
                  <div class="accordion-body">
                    <div class="small text-muted mb-2">Trạng thái: @e.Status | Ngày phát: @e.ReleaseDate?.ToShortDateString()</div>
                    @if (_videosByEpisode.TryGetValue(e.Id, out var vids) && vids.Count > 0)
                    {
                      <ul class="list-group">
                        @foreach (var v in vids)
                        {
                          <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                              <div class="fw-bold">@v.Kind - @v.Quality</div>
                              <div class="small text-muted">@v.Bucket / @v.ObjectKey</div>
                            </div>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => PreviewAsync(v)">Xem thử (10')</button>
                          </li>
                        }
                      </ul>
                    }
                    else
                    {
                      <div class="text-muted">Chưa có video.</div>
                    }
                  </div>
                </div>
              </div>
            }
          </div>
        }
      }

      @if (!string.IsNullOrEmpty(_previewUrl))
      {
        <div class="mt-3">
          <div class="alert alert-info py-2">
            Link tạm (SAS, hết hạn sau 10 phút): <a href="@_previewUrl" target="_blank">@_previewUrl</a>
          </div>
          <video controls style="width:100%; max-height:420px;">
            <source src="@_previewUrl" type="application/vnd.apple.mpegurl">
            Trình duyệt của bạn có thể không hỗ trợ HLS trực tiếp. Mở link ở tab mới nếu không phát được.
          </video>
        </div>
      }
    </div>
  </div>
}

@code {
  [Parameter] public int id { get; set; }

  private bool _loading = true;
  private Movie? _movie;
  private string? _posterUrl;

  private List<Episode> _episodes = new();
  private List<VideoAsset> _movieVideos = new();
  private Dictionary<int, List<VideoAsset>> _videosByEpisode = new();

  private string? _previewUrl;

  protected override async Task OnInitializedAsync()
  {
    _movie = await Db.Movies.AsNoTracking().FirstOrDefaultAsync(m => m.Id == id);
    if (_movie is null) { _loading = false; return; }

    var poster = await Db.ImageAssets.AsNoTracking()
                   .Where(i => i.MovieId == id)
                   .OrderBy(i => i.Id)
                   .FirstOrDefaultAsync();
    
    if (poster is not null)
    {
      _posterUrl = (await Storage.GetReadSignedUrlAsync(
        poster.Bucket, poster.ObjectKey, TimeSpan.FromMinutes(30)
      )).ToString();
    }

    if (_movie.Type == MovieType.Single)
    {
      _movieVideos = await Db.VideoAssets.AsNoTracking()
                        .Where(v => v.MovieId == id)
                        .OrderBy(v => v.Id).ToListAsync();
    }
    else
    {
      _episodes = await Db.Episodes.AsNoTracking()
                    .Where(e => e.MovieId == id)
                    .OrderBy(e => e.Number).ToListAsync();

      var epIds = _episodes.Select(e => e.Id).ToArray();
      var vids = await Db.VideoAssets.AsNoTracking()
                    .Where(v => v.EpisodeId != null && epIds.Contains(v.EpisodeId!.Value))
                    .OrderBy(v => v.Id).ToListAsync();

      _videosByEpisode = vids.GroupBy(v => v.EpisodeId!.Value)
                             .ToDictionary(g => g.Key, g => g.ToList());
    }

    _loading = false;
  }

  private async Task PreviewAsync(VideoAsset v)
  {
    _previewUrl = (await Storage.GetReadSignedUrlAsync(v.Bucket, v.ObjectKey, TimeSpan.FromMinutes(10))).ToString();
  }
}
