@page "/admin/movies/{MovieId:int}/subtitles/{Lang?}"
@page "/admin/movies/{MovieId:int}/episodes/{EpisodeId:int}/subtitles/{Lang?}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using MoviePortal.Adapters
@using MoviePortal.Data
@using MoviePortal.Models.Entities
@using MoviePortal.Models.Specification
@using MoviePortal.Models.ValueObject
@inject AppDbContext Db
@inject IOptions<StorageOptions> Opts
@inject FfmpegHlsTranscoder Transcoder
@inject IJSRuntime Js

<h4>Subtitle Editor @if (EpisodeId is not null) { <span>(Movie @MovieId • Ep @EpisodeId)</span> } else { <span>(Movie @MovieId)</span> }</h4>

@if (!string.IsNullOrEmpty(_playerSrc))
{
  <video id="vplayer" controls style="width:100%;max-height:60vh;"></video>
}
else
{
  <div class="alert alert-warning">Chưa tìm thấy HLS master cho nội dung này. Hãy upload video trước.</div>
}

<div class="row mt-3">
  <div class="col-md-6">
    <div class="d-flex align-items-center mb-2">
      <label class="me-2">FPS</label>
      <input class="form-control form-control-sm" style="width:90px" type="number" @bind="Fps" min="1" />
      <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => Step(-1)">⟨ Prev frame</button>
      <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => Step(1)">Next frame ⟩</button>
      <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="Pause">Pause</button>
    </div>

    <div class="mb-2">
      <div class="input-group input-group-sm mb-1">
        <span class="input-group-text">Start</span>
        <input class="form-control" @bind="CurrentCue.Start" />
        <button class="btn btn-outline-secondary" @onclick="SetStartFromPlayer">⏱ lấy từ video</button>
      </div>
      <div class="input-group input-group-sm mb-1">
        <span class="input-group-text">End</span>
        <input class="form-control" @bind="CurrentCue.End" />
        <button class="btn btn-outline-secondary" @onclick="SetEndFromPlayer">⏱ lấy từ video</button>
      </div>
      <textarea class="form-control form-control-sm" rows="3" placeholder="Nội dung phụ đề"
                @bind="CurrentCue.Text"></textarea>
      <div class="mt-2">
        <button class="btn btn-sm btn-primary" @onclick="AddCue">+ Thêm cue</button>
        <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="ClearCurrent">Clear</button>
      </div>
      <div class="small text-muted mt-1">Định dạng thời gian: hh:mm:ss.fff (ví dụ 00:01:12.500)</div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="d-flex justify-content-between align-items-center">
      <h6 class="mb-2">Danh sách cue (@Cues.Count)</h6>
      <div>
        <select class="form-select form-select-sm d-inline-block" style="width:auto" @bind="Lang">
          @foreach (var l in _langs) { <option>@l</option> }
        </select>
        <button class="btn btn-sm btn-success ms-2" @onclick="Publish">Xuất & Publish</button>
      </div>
    </div>
    <div class="table-responsive" style="max-height:50vh;overflow:auto">
      <table class="table table-sm align-middle">
        <thead><tr><th>#</th><th>Start</th><th>End</th><th>Nội dung</th><th style="width:110px"></th></tr></thead>
        <tbody>
          @for (var i = 0; i < Cues.Count; i++)
          {
            var c = Cues[i];
            <tr>
              <td>@(i+1)</td>
              <td>@c.Start</td>
              <td>@c.End</td>
              <td>@c.Text</td>
              <td class="text-end">
                <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => SeekTo(c.Start)">▶</button>
                <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveAt(i)">Xoá</button>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script>
window.subtitleEditor = {
  initHls: (id, src) => {
    const v = document.getElementById(id);
    if (!v) return;
    if (Hls.isSupported()) {
      const hls = new Hls();
      hls.loadSource(src);
      hls.attachMedia(v);
      window.__hls = hls;
    } else if (v.canPlayType('application/vnd.apple.mpegurl')) {
      v.src = src;
    }
  },
  getCurrentTime: (id) => {
    const v = document.getElementById(id);
    return v ? v.currentTime : 0;
  },
  setCurrentTime: (id, t) => {
    const v = document.getElementById(id);
    if (v) v.currentTime = t;
  },
  pause: (id) => {
    const v = document.getElementById(id);
    if (v) v.pause();
  }
};
</script>

@code {
  [Parameter] public int MovieId { get; set; }
  [Parameter] public int? EpisodeId { get; set; }
  [Parameter] public string? Lang { get; set; } = "vi";

  private string? _playerSrc;
  private List<string> _langs = new() { "vi", "en", "ja", "ko" }; // tuỳ bạn
  private int Fps { get; set; } = 25;

  // cue VM
  public class CueVm
  {
      public string Start { get; set; } = "00:00:00.000";
      public string End   { get; set; } = "00:00:00.000";
      public string Text  { get; set; } = "";
  }
  private CueVm CurrentCue { get; set; } = new();
  private List<CueVm> Cues { get; set; } = new();

  protected override async Task OnInitializedAsync()
  {
      // tìm master m3u8
      var master = await Db.VideoAssets.AsNoTracking()
          .Where(x => x.MovieId == MovieId && x.EpisodeId == EpisodeId && x.Kind == VideoKind.Master)
          .OrderByDescending(x => x.Id)
          .FirstOrDefaultAsync();

      if (master is null) return;

      _playerSrc = BuildPublicUrl(master);
      await Js.InvokeVoidAsync("subtitleEditor.initHls", "vplayer", _playerSrc);
  }

  private string BuildPublicUrl(VideoAsset v)
  {
      var endpoint = Opts.Value.S3.Endpoint?.TrimEnd('/');
      var baseUrl = endpoint?.StartsWith("http") == true ? endpoint : $"https://{endpoint}";
      return $"{baseUrl}/{v.Bucket}/{v.ObjectKey}";
  }

  // time helpers
  private async Task<double> GetPlayerTime()
      => await Js.InvokeAsync<double>("subtitleEditor.getCurrentTime", "vplayer");

  private async Task SetStartFromPlayer()
  {
      var t = await GetPlayerTime();
      CurrentCue.Start = TimeSpan.FromSeconds(t).ToString(@"hh\:mm\:ss\.fff");
  }
  private async Task SetEndFromPlayer()
  {
      var t = await GetPlayerTime();
      CurrentCue.End = TimeSpan.FromSeconds(t).ToString(@"hh\:mm\:ss\.fff");
  }
  private async Task SeekTo(string timeStr)
  {
      if (TimeSpan.TryParse(timeStr, out var ts))
          await Js.InvokeVoidAsync("subtitleEditor.setCurrentTime", "vplayer", ts.TotalSeconds);
  }
  private async Task SeekTo(TimeSpan ts) => await Js.InvokeVoidAsync("subtitleEditor.setCurrentTime", "vplayer", ts.TotalSeconds);

  private async Task Step(int dir)
  {
      var t = await GetPlayerTime();
      var step = 1.0 / Math.Max(1, Fps);
      await Js.InvokeVoidAsync("subtitleEditor.setCurrentTime", "vplayer", Math.Max(0, t + (dir * step)));
  }
  private async Task Pause() => await Js.InvokeVoidAsync("subtitleEditor.pause", "vplayer");

  private void AddCue()
  {
      if (!TimeSpan.TryParse(CurrentCue.Start, out var a) ||
          !TimeSpan.TryParse(CurrentCue.End, out var b) || b <= a || string.IsNullOrWhiteSpace(CurrentCue.Text))
          return;

      Cues.Add(new CueVm { Start = CurrentCue.Start, End = CurrentCue.End, Text = CurrentCue.Text.Trim() });
      Cues = Cues.OrderBy(c => TimeSpan.Parse(c.Start)).ToList();
      CurrentCue = new();
      StateHasChanged();
  }
  private void RemoveAt(int i)
  {
      if (i >= 0 && i < Cues.Count) Cues.RemoveAt(i);
  }
  private void ClearCurrent() => CurrentCue = new();

  private string BuildVtt()
  {
      var sb = new System.Text.StringBuilder();
      sb.AppendLine("WEBVTT");
      sb.AppendLine();
      foreach (var (c, idx) in Cues.Select((v, i) => (v, i+1)))
      {
          sb.AppendLine($"{c.Start} --> {c.End}");
          sb.AppendLine(c.Text.Replace("\r\n","\n"));
          sb.AppendLine();
      }
      return sb.ToString();
  }

  private async Task Publish()
  {
      var vtt = BuildVtt();
      await Transcoder.TranscodeSubtitleTextToHlsAndAttachAsync(MovieId, EpisodeId, vtt, Lang ?? "vi", LabelFromLang(Lang));
  }

  private string LabelFromLang(string? l) => l?.ToLower() switch
  {
      "vi" => "Tiếng Việt",
      "en" => "English",
      "ja" => "日本語",
      "ko" => "한국어",
      _    => l ?? "sub"
  };
}
